// Code generated by Microsoft (R) AutoRest Code Generator 0.9.7.0
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using ContosoFront;
using Microsoft.Rest;

namespace ContosoFront
{
    public static partial class ContosoAPIExtensions
    {
        /// <param name='operations'>
        /// Reference to the ContosoFront.IContosoAPI.
        /// </param>
        /// <param name='value'>
        /// Required.
        /// </param>
        public static string Create(this IContosoAPI operations, string value)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IContosoAPI)s).CreateAsync(value);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the ContosoFront.IContosoAPI.
        /// </param>
        /// <param name='value'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<string> CreateAsync(this IContosoAPI operations, string value, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<string> result = await operations.CreateWithOperationResponseAsync(value, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the ContosoFront.IContosoAPI.
        /// </param>
        /// <param name='key'>
        /// Required.
        /// </param>
        public static object Delete(this IContosoAPI operations, string key)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IContosoAPI)s).DeleteAsync(key);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the ContosoFront.IContosoAPI.
        /// </param>
        /// <param name='key'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<object> DeleteAsync(this IContosoAPI operations, string key, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<object> result = await operations.DeleteWithOperationResponseAsync(key, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the ContosoFront.IContosoAPI.
        /// </param>
        public static IList<string> GetAll(this IContosoAPI operations)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IContosoAPI)s).GetAllAsync();
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the ContosoFront.IContosoAPI.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<IList<string>> GetAllAsync(this IContosoAPI operations, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<System.Collections.Generic.IList<string>> result = await operations.GetAllWithOperationResponseAsync(cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the ContosoFront.IContosoAPI.
        /// </param>
        /// <param name='key'>
        /// Required.
        /// </param>
        /// <param name='newValue'>
        /// Required.
        /// </param>
        public static object Update(this IContosoAPI operations, string key, string newValue)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IContosoAPI)s).UpdateAsync(key, newValue);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the ContosoFront.IContosoAPI.
        /// </param>
        /// <param name='key'>
        /// Required.
        /// </param>
        /// <param name='newValue'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<object> UpdateAsync(this IContosoAPI operations, string key, string newValue, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<object> result = await operations.UpdateWithOperationResponseAsync(key, newValue, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
    }
}
